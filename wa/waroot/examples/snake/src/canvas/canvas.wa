// 版权 @2022 凹语言 作者。保留所有权利。

/*
创建html.canvas的函数，由JS环境导入
w、h为画布以像素为单位的宽高
返回值为画布对象对应的网页DOM对象id
*/
#wa:import snake_game newCanvas
func newCanvas_JS(w, h: u32) => u32

/*
将帧缓存更新至html.canvas的函数，由JS环境导入
id为画布对象对应的网页DOM对象id
buf为帧缓存指针
*/
#wa:import snake_game updateCanvas
func updateCanvas_JS(id: u32, buf: *u32)

//画布事件回调函数原型
type OnTouch :func(x, y: u32)
type OnKey :func(key: u32)

//画布对象
type Canvas :struct {
	device_id: u32   //画布对象对应的网页DOM对象id
	width:     u32   //画布宽度，以像素为单位
	height:    u32   //画布高度，以像素为单位
	frame_buf: []u32 //画布帧缓存，容量为Width * Height
}

//画布事件
type CanvasEvents :struct {
	Device_id:   u32     //画布设备ID
	OnMouseDown: OnTouch //鼠标按下时的回调处理函数
	OnMouseUp:   OnTouch //鼠标松开时的回调处理函数
	OnKeyDown:   OnKey   //键盘按下时的回调处理函数
	OnKeyUp:     OnKey   //键盘弹起时的回调处理函数
}

//创建一个宽度为w像素、高度为h像素的画布对象
func NewCanvas(w, h: u32) => *Canvas {
	canvas: Canvas
	canvas.device_id = newCanvas_JS(w, h)
	canvas.width = w
	canvas.height = h
	canvas.frame_buf = make([]u32, w*h)

	return &canvas
}

//获取画布设备ID
func Canvas.GetDeviceID() => u32 {
	return this.device_id
}

//获取画布宽度
func Canvas.GetWidth() => u32 {
	return this.width
}

//获取画布高度
func Canvas.GetHeight() => u32 {
	return this.height
}

//获取画布对象坐标为(x, y)处的像素颜色值
func Canvas.GetPixel(x, y: u32) => u32 {
	return this.frame_buf[y*this.width+x]
}

//设置画布对象坐标(x, y)处的颜色值为color
func Canvas.SetPixel(x, y, color: u32) {
	this.frame_buf[y*this.width+x] = color
}

//用color指定的颜色清除整个画布
func Canvas.Clear(color: u32) {
	for i := range this.frame_buf {
		this.frame_buf[i] = color
	}
}

//将画布对象的帧缓存更新至网页DOM对象
func Canvas.Flush() {
	updateCanvas_JS(this.device_id, &this.frame_buf[0])
}

global canvas_events: []CanvasEvents

func AttachCanvasEvents(e: CanvasEvents) {
	for i := range canvas_events {
		if canvas_events[i].Device_id == e.Device_id {
			canvas_events[i] = e
			return
		}
	}

	canvas_events = append(canvas_events, e)
}

/*
供外部JS调用的鼠标按下事件响应函数
id为画布DOM对象对应的Canvas对象id
(x, y)为画布像素坐标系坐标
*/
func OnMouseDown(id: u32, x, y: u32) {
	for _, i := range canvas_events {
		if i.Device_id == id {
			i.OnMouseDown(x, y)
			return
		}
	}
}

/*
供外部JS调用的鼠标弹起事件响应函数
id为画布DOM对象对应的Canvas对象id
(x, y)为画布像素坐标系坐标
*/
func OnMouseUp(id: u32, x, y: u32) {
	for _, i := range canvas_events {
		if i.Device_id == id {
			i.OnMouseUp(x, y)
			return
		}
	}
}

/*
供外部JS调用的键盘按下事件响应函数
id为画布DOM对象对应的Canvas对象id
key为键位。37=← 38=↑ 39=→ 40=↓
*/
func OnKeyDown(id, key: u32) {
	for _, i := range canvas_events {
		if i.Device_id == id {
			i.OnKeyDown(key)
			return
		}
	}
}

/*
供外部JS调用的键盘弹起事件响应函数
id为画布DOM对象对应的Canvas对象id
key为键位
*/
func OnKeyUp(id, key: u32) {
	for _, i := range canvas_events {
		if i.Device_id == id {
			i.OnKeyUp(key)
			return
		}
	}
}
